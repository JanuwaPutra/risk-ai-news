<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use andreskrey\Readability\Readability;
use andreskrey\Readability\Configuration;
use App\Models\AnalysisResult;
use App\Services\AnalysisApiService;
use App\Models\Tokoh;
use Illuminate\Support\Facades\Log;

class NewsController extends Controller
{
    protected $analysisApi;
    
    /**
     * Create a new controller instance.
     *
     * @param AnalysisApiService $analysisApi
     */
    public function __construct(AnalysisApiService $analysisApi)
    {
        $this->analysisApi = $analysisApi;
    }
    
    /**
     * Show the news search page
     *
     * @param Request $request
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        $query = $request->input('query');
        $articles = [];
        
        if ($query) {
            $articles = $this->searchNews($query);
        }
        
        // Get tokoh data for analysis
        $tokohData = Tokoh::all();
        
        return view('news.index', [
            'query' => $query,
            'articles' => $articles,
            'tokohData' => $tokohData
        ]);
    }
    
    /**
     * Search news from NewsAPI
     *
     * @param string $query
     * @return array
     */
    private function searchNews(string $query): array
    {
        try {
            $response = Http::get('https://newsapi.org/v2/everything', [
                'domains' => 'detik.com,kompas.com,cnnindonesia.com',
                'q' => $query,
                'language' => 'id',
                'sortBy' => 'publishedAt',
                'apiKey' => 'f515168ded7a4f2f98ca875cf65b3316'
            ]);
            
            if ($response->successful()) {
                $data = $response->json();
                
                if ($data['status'] === 'ok' && isset($data['articles'])) {
                    return $data['articles'];
                }
            }
            
            return [];
        } catch (\Exception $e) {
            Log::error("Error fetching news: " . $e->getMessage());
            return [];
        }
    }
    
    /**
     * Fetch full article content
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function fetchFull(Request $request)
    {
        $url = $request->input('url');
        
        if (!$url) {
            return response()->json(['error' => 'URL is required'], 400);
        }
        
        try {
            $html = Http::get($url)->body();
            
            $configuration = new Configuration();
            $configuration->setFixRelativeURLs(true);
            $configuration->setOriginalURL($url);
            
            $readability = new Readability($configuration, $html);
            $result = $readability->parse($html);
            
            if (!$result) {
                return response()->json(['error' => 'Failed to parse content'], 500);
            }
            
            return response()->json([
                'title' => $readability->getTitle(),
                'content' => $readability->getContent(),
                'excerpt' => $readability->getExcerpt(),
            ]);
        } catch (\Exception $e) {
            Log::error("Error fetching full article: " . $e->getMessage());
            return response()->json(['error' => 'Failed to parse content: ' . $e->getMessage()], 500);
        }
    }
    
    /**
     * Analyze news article for a specific person
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function analyzeArticle(Request $request)
    {
        $url = $request->input('url');
        $personId = $request->input('person_id');
        $title = $request->input('title');
        $source = $request->input('source');
        $searchQuery = $request->input('search_query', '');
        
        if (!$url || !$personId) {
            return response()->json(['error' => 'URL and person ID are required'], 400);
        }
        
        try {
            // Get person details
            $person = Tokoh::findOrFail($personId);
            
            // Fetch full article content
            $html = Http::get($url)->body();
            
            $configuration = new Configuration();
            $readability = new Readability($configuration, $html);
            $result = $readability->parse($html);
            
            if (!$result) {
                return response()->json(['error' => 'Failed to parse content'], 500);
            }
            
            // Get content
            $content = $readability->getContent();
            // Remove HTML tags for analysis
            $plainText = strip_tags($content);
            
            // Check if the person's name is actually mentioned in the content with STRICT boundary checking
            $nameFound = false;
            $aliasFound = false;
            $exactMatchPattern = '/\b' . preg_quote($person->nama, '/') . '\b/i';
            $nameFound = preg_match($exactMatchPattern, $plainText, $nameMatches);
            
            if ($nameFound) {
                Log::info("Found name '{$person->nama}' in article with exact match: " . $nameMatches[0]);
            }
            
            // Only check aliases if name not found
            if (!$nameFound && !empty($person->alias)) {
                $aliases = preg_split('/[,;\n]+/', $person->alias);
                foreach ($aliases as $alias) {
                    $alias = trim($alias);
                    if (!empty($alias)) {
                        $aliasPattern = '/\b' . preg_quote($alias, '/') . '\b/i';
                        if (preg_match($aliasPattern, $plainText, $aliasMatches)) {
                            $aliasFound = true;
                            Log::info("Found alias '{$alias}' for person '{$person->nama}' in article with match: " . $aliasMatches[0]);
                            break;
                        }
                    }
                }
            }
            
            // Debug log the exact state
            Log::info("Single article analysis for '{$person->nama}': nameFound={$nameFound}, aliasFound={$aliasFound}");
            
            if (!$nameFound && !$aliasFound) {
                return response()->json([
                    'error' => "Tidak ada pernyataan atau tindakan dari tokoh '{$person->nama}' yang dianalisis karena tidak ditemukan dalam berita."
                ], 400);
            }
            
            // Perform analysis
            $analysis = $this->analysisApi->analyzeParagraph(
                $plainText, 
                $person->nama, 
                $person->jabatan ?? 'Tidak ada jabatan' // Provide default value if jabatan is null
            );
            
            // Check if name was actually found (double check with API service)
            if (isset($analysis['name_not_found']) && $analysis['name_not_found'] === true) {
                return response()->json([
                    'error' => "Tokoh '{$person->nama}' tidak memiliki pernyataan atau tindakan dalam berita ini karena nama tokoh tidak ditemukan dalam konten berita."
                ], 400);
            }
            
            // Convert faktor_risiko array to string for storage
            $faktorRisiko = $analysis['faktor_risiko'] ?? [];
            if (is_array($faktorRisiko)) {
                $faktorRisikoStr = implode(', ', $faktorRisiko);
            } else {
                $faktorRisikoStr = (string)$faktorRisiko;
            }
            
            // Save result to database
            $analysisResult = AnalysisResult::updateOrCreate(
                [
                    'nama' => $person->nama,
                    'paragraf' => substr($plainText, 0, 1000), // Store first 1000 chars
                ],
                [
                    'jabatan' => $person->jabatan,
                    'source' => $source,
                    'kata_kunci' => $searchQuery,
                    'ringkasan' => $analysis['ringkasan'] ?? 'N/A',
                    'skor_risiko' => $analysis['skor_risiko'] ?? 0,
                    'persentase_kerawanan' => $analysis['persentase_kerawanan'] ?? '0%',
                    'kategori' => $analysis['kategori'] ?? 'RENDAH',
                    'faktor_risiko' => $faktorRisikoStr,
                    'rekomendasi' => $analysis['rekomendasi'] ?? 'N/A',
                    'urgensi' => $analysis['urgensi'] ?? 'MONITORING',
                    'tanggal_tambah' => now()
                ]
            );
            
            return response()->json([
                'success' => true,
                'analysis' => $analysis,
                'result_id' => $analysisResult->id
            ]);
            
        } catch (\Exception $e) {
            Log::error("Error analyzing article: " . $e->getMessage());
            return response()->json(['error' => 'Failed to analyze article: ' . $e->getMessage()], 500);
        }
    }

    /**
     * Analyze news article for all people in the database
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function analyzeArticleForAll(Request $request)
    {
        $url = $request->input('url');
        $title = $request->input('title');
        $source = $request->input('source');
        $searchQuery = $request->input('search_query', '');
        
        if (!$url) {
            return response()->json(['error' => 'URL is required'], 400);
        }
        
        try {
            // Fetch all people from database
            $people = Tokoh::all();
            
            if ($people->isEmpty()) {
                return response()->json(['error' => 'No people found in the database'], 400);
            }
            
            // Fetch full article content once
            $html = Http::get($url)->body();
            
            $configuration = new Configuration();
            $readability = new Readability($configuration, $html);
            $result = $readability->parse($html);
            
            if (!$result) {
                return response()->json(['error' => 'Failed to parse content'], 500);
            }
            
            // Get content
            $content = $readability->getContent();
            // Remove HTML tags for analysis
            $plainText = strip_tags($content);
            
            $results = [];
            $resultCount = 0;
            
            // Analyze for each person
            foreach ($people as $person) {
                try {
                    // Check if the person's name is mentioned in the article with STRICT boundary matching
                    $nameFound = false;
                    $aliasFound = false;
                    $exactMatchPattern = '/\b' . preg_quote($person->nama, '/') . '\b/i';
                    $nameFound = preg_match($exactMatchPattern, $plainText);
                    
                    // Only check aliases if name not found
                    if (!$nameFound && !empty($person->alias)) {
                        // Split aliases by comma, semicolon, or newline
                        $aliases = preg_split('/[,;\n]+/', $person->alias);
                        foreach ($aliases as $alias) {
                            $alias = trim($alias);
                            if (!empty($alias)) {
                                $aliasPattern = '/\b' . preg_quote($alias, '/') . '\b/i';
                                if (preg_match($aliasPattern, $plainText)) {
                                    $aliasFound = true;
                                    Log::info("Found alias '{$alias}' for person '{$person->nama}' in article");
                                    break;
                                }
                            }
                        }
                    }
                    
                    // Debug log the exact state
                    Log::info("Person '{$person->nama}': nameFound={$nameFound}, aliasFound={$aliasFound}");
                    
                    // If either name or alias is found with STRICT boundary matching, proceed with analysis
                    if ($nameFound || $aliasFound) {
                        Log::info("PROCEEDING with analysis for '{$person->nama}' - strict name/alias check PASSED");
                        
                        // Perform analysis for this person
                        $analysis = $this->analysisApi->analyzeParagraph(
                            $plainText, 
                            $person->nama, 
                            $person->jabatan ?? 'Tidak ada jabatan' // Provide default value if jabatan is null
                        );
                        
                        // Check if name was actually found (double check with API service)
                        if (isset($analysis['name_not_found']) && $analysis['name_not_found'] === true) {
                            Log::info("API confirmed {$person->nama} not found in article, skipping database entry");
                            continue; // Skip to next person without adding to database
                        }
                        
                        // More validation - look for entire name with clear word boundaries
                        // This is a super strict check to catch any edge cases
                        $foundInContext = false;
                        $namePatternStrict = '/\b' . preg_quote($person->nama, '/') . '\b/i';
                        
                        if (preg_match($namePatternStrict, $plainText, $matches)) {
                            $foundInContext = true;
                            Log::info("Super strict check found name '{$person->nama}' in article with match: " . $matches[0]);
                        } else if (!empty($person->alias)) {
                            // Check aliases with super strict boundaries
                            $aliases = preg_split('/[,;\n]+/', $person->alias);
                            foreach ($aliases as $alias) {
                                $alias = trim($alias);
                                if (!empty($alias)) {
                                    $aliasPatternStrict = '/\b' . preg_quote($alias, '/') . '\b/i';
                                    if (preg_match($aliasPatternStrict, $plainText, $matches)) {
                                        $foundInContext = true;
                                        Log::info("Super strict check found alias '{$alias}' in article with match: " . $matches[0]);
                                        break;
                                    }
                                }
                            }
                        }
                        
                        // Skip database entry if super strict check fails
                        if (!$foundInContext) {
                            Log::info("Skipping database entry for {$person->nama} - super strict name/alias check failed");
                            continue;
                        }
                        
                        // Now we're CERTAIN the name is in the article - proceed with database entry
                        Log::info("CONFIRMED: {$person->nama} is definitely in the article, proceeding with database entry");
                        
                        // Convert faktor_risiko array to string for storage
                        $faktorRisiko = $analysis['faktor_risiko'] ?? [];
                        if (is_array($faktorRisiko)) {
                            $faktorRisikoStr = implode(', ', $faktorRisiko);
                        } else {
                            $faktorRisikoStr = (string)$faktorRisiko;
                        }
                        
                        // Save result to database
                        $analysisResult = AnalysisResult::updateOrCreate(
                            [
                                'nama' => $person->nama,
                                'paragraf' => substr($plainText, 0, 1000), // Store first 1000 chars
                            ],
                            [
                                'jabatan' => $person->jabatan,
                                'source' => $source,
                                'kata_kunci' => $searchQuery,
                                'ringkasan' => $analysis['ringkasan'] ?? 'N/A',
                                'skor_risiko' => $analysis['skor_risiko'] ?? 0,
                                'persentase_kerawanan' => $analysis['persentase_kerawanan'] ?? '0%',
                                'kategori' => $analysis['kategori'] ?? 'RENDAH',
                                'faktor_risiko' => $faktorRisikoStr,
                                'rekomendasi' => $analysis['rekomendasi'] ?? 'N/A',
                                'urgensi' => $analysis['urgensi'] ?? 'MONITORING',
                                'tanggal_tambah' => now()
                            ]
                        );
                        
                        $results[] = [
                            'name' => $person->nama,
                            'category' => $analysis['kategori'] ?? 'RENDAH',
                            'score' => $analysis['skor_risiko'] ?? 0
                        ];
                        
                        $resultCount++;
                    } else {
                        // Skip this person - name not found in article
                        Log::info("Skipped analysis for {$person->nama}: Name not found in article");
                    }
                } catch (\Exception $e) {
                    Log::error("Error analyzing article for person {$person->nama}: " . $e->getMessage());
                    // Continue with next person
                }
            }
            
            // Always return success, even if no people were found
            return response()->json([
                'success' => true,
                'analyzed_count' => $resultCount,
                'results' => $results,
                'no_people_found' => ($resultCount === 0)
            ]);
            
        } catch (\Exception $e) {
            Log::error("Error analyzing article for all people: " . $e->getMessage());
            return response()->json(['error' => 'Failed to analyze article: ' . $e->getMessage()], 500);
        }
    }
}
